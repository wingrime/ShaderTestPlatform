
#version 330
uniform vec4 vp; /* viewport conf*/
uniform vec4 mouse;
uniform float time;
layout(location = 0) out vec4 color;
vec2 uv;


uint hash (uint x) {
x+= x<<10u;
x^= x>>6u;
x+= x<<3u;
x^= x>>11u;
x+= x<<15u;

return x;
}

float floatConstruct(uint m) {
    const uint ieeeMantissa = 0x007fffffu; // mantissa bitmask
    const uint ieeeOne = 0x3f800000u; // 1.0 in uint

m &= ieeeMantissa;
m |= ieeeOne;

float f = uintBitsToFloat(m);
return f - 1.0;
}
uint seed;
float rnd() {
seed = hash(seed);
return floatConstruct(seed);

}

float sd(vec2 uv) {

    return floatConstruct( hash(1u+hash(  hash(floatBitsToUint(uv.x))+hash(hash(floatBitsToUint(uv.y))+hash(floatBitsToUint(time)))  )));
}
vec2 tc(vec2 i, float t) {

return vec2(floor(i.x*t+1.0)/t , floor(i.y*t)/t  );
}

float metabal(vec3 c) {

return 1.0 / dot(c,c);
}

void main(void)
{

    vec3 res_color = vec3(0.0f);

    uv = ((gl_FragCoord.xy / vp.xy)*2.0 - 1.0);
    vec2 m =( mouse.xy / vp.xy) *2.0-1.0;
    m.x = -m.x;
    seed = hash(1u+hash(  hash(floatBitsToUint(uv.x))+hash(hash(floatBitsToUint(uv.y))+hash(floatBitsToUint(time)))  ));
    //uv.x =  uv.x * sin(time) - uv.y * cos(time) ;
    //uv.y =  uv.x * cos(time) + uv.y * sin(time);
    vec2 nv = tc(uv+vec2(sin(time),cos(time)),20.0* (1.501+ sin(time*0.5)  ));
    vec2 nv2 = tc(uv+vec2(sin(-time),cos(-time)),21.0*(1.501+ sin(time*0.5)  )) ;;//+ sd(floor(uv*10.0) /10.0);
    vec2 nv3 = tc(uv+m,20.0* (1.501+ sin(time*0.5)  ));
    res_color = vec3(1.0,1.0,1.0)*metabal(vec3(nv2*4.0,1.0))+vec3(1.0,1.0,1.0)*metabal(vec3(nv*4.0,1.0))+vec3(1.0,1.0,1.0)*metabal(vec3(nv3*4.0,1.0));
    vec3 scanline = vec3(1.0)* sign(abs( uv.y ));
    color = vec4(res_color*scanline,1.0);
}
