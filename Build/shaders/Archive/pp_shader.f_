#version 330
uniform vec4 vp; /* viewport conf*/
layout(location = 0) out vec4 color;
uniform sampler2D texSRC1;
uniform sampler2D texSRC2;

#define texDEPTH texSRC2
#define texFB texSRC1



float texSZ = 0.001;

uniform float ssaoSize = 0.01;
uniform float ssaoDepthClamp =0.01;
uniform float ssaoLevelClamp = 1.0;

/*bob jankins one at time hash*/
uint hash (uint x) {
x+= x<<10u;
x^= x>>6u;
x+= x<<3u;
x^= x>>11u;
x+= x<<15u;
return x;
}

float floatConstruct(uint m) {
    const uint ieeeMantissa = 0x007fffffu; // mantissa bitmask
    const uint ieeeOne = 0x3f800000u; // 1.0 in uint

m &= ieeeMantissa;
m |= ieeeOne;

float f = uintBitsToFloat(m);
return f - 1.0;
}
uint seed;
float rnd() {
seed = hash(seed);
return floatConstruct(seed);

}


vec3  normal_from_depth( vec2 c) {
	float d  = texture(texDEPTH, c).r;
	float dx = texture(texDEPTH, c + vec2( 0.0, 0.005) ).r;
	float dy = texture(texDEPTH, c + vec2(0.005 ,0.0) ).r;
	//float dxn = texture(texDEPTH, c + vec2( 0.0, -0.005) ).r;
	//float dyn = texture(texDEPTH, c + vec2(-0.005 ,0.0) ).r;

	vec3 v1 = vec3(0.0005 , 0.0 ,  dx-d);
	vec3 v2 = vec3(0.0, 0.0005  ,  dy-d);
	vec3 n = cross(v1,v2);
	//n.z = -n.z;
	return normalize(n);
	
	


}
const int Samples = 4;
void main ()
{

vec2 poissonDisk[64];
poissonDisk[0] = vec2(-0.613392, 0.617481);
poissonDisk[1] = vec2(0.170019, -0.040254);
poissonDisk[2] = vec2(-0.299417, 0.791925);
poissonDisk[3] = vec2(0.645680, 0.493210);
poissonDisk[4] = vec2(-0.651784, 0.717887);
poissonDisk[5] = vec2(0.421003, 0.027070);
poissonDisk[6] = vec2(-0.817194, -0.271096);
poissonDisk[7] = vec2(-0.705374, -0.668203);
poissonDisk[8] = vec2(0.977050, -0.108615);
poissonDisk[9] = vec2(0.063326, 0.142369);
poissonDisk[10] = vec2(0.203528, 0.214331);
poissonDisk[11] = vec2(-0.667531, 0.326090);
poissonDisk[12] = vec2(-0.098422, -0.295755);
poissonDisk[13] = vec2(-0.885922, 0.215369);
poissonDisk[14] = vec2(0.566637, 0.605213);
poissonDisk[15] = vec2(0.039766, -0.396100);
poissonDisk[16] = vec2(0.751946, 0.453352);
poissonDisk[17] = vec2(0.078707, -0.715323);
poissonDisk[18] = vec2(-0.075838, -0.529344);
poissonDisk[19] = vec2(0.724479, -0.580798);
poissonDisk[20] = vec2(0.222999, -0.215125);
poissonDisk[21] = vec2(-0.467574, -0.405438);
poissonDisk[22] = vec2(-0.248268, -0.814753);
poissonDisk[23] = vec2(0.354411, -0.887570);
poissonDisk[24] = vec2(0.175817, 0.382366);
poissonDisk[25] = vec2(0.487472, -0.063082);
poissonDisk[26] = vec2(-0.084078, 0.898312);
poissonDisk[27] = vec2(0.488876, -0.783441);
poissonDisk[28] = vec2(0.470016, 0.217933);
poissonDisk[29] = vec2(-0.696890, -0.549791);
poissonDisk[30] = vec2(-0.149693, 0.605762);
poissonDisk[31] = vec2(0.034211, 0.979980);
poissonDisk[32] = vec2(0.503098, -0.308878);
poissonDisk[33] = vec2(-0.016205, -0.872921);
poissonDisk[34] = vec2(0.385784, -0.393902);
poissonDisk[35] = vec2(-0.146886, -0.859249);
poissonDisk[36] = vec2(0.643361, 0.164098);
poissonDisk[37] = vec2(0.634388, -0.049471);
poissonDisk[38] = vec2(-0.688894, 0.007843);
poissonDisk[39] = vec2(0.464034, -0.188818);
poissonDisk[40] = vec2(-0.440840, 0.137486);
poissonDisk[41] = vec2(0.364483, 0.511704);
poissonDisk[42] = vec2(0.034028, 0.325968);
poissonDisk[43] = vec2(0.099094, -0.308023);
poissonDisk[44] = vec2(0.693960, -0.366253);
poissonDisk[45] = vec2(0.678884, -0.204688);
poissonDisk[46] = vec2(0.001801, 0.780328);
poissonDisk[47] = vec2(0.145177, -0.898984);
poissonDisk[48] = vec2(0.062655, -0.611866);
poissonDisk[49] = vec2(0.315226, -0.604297);
poissonDisk[50] = vec2(-0.780145, 0.486251);
poissonDisk[51] = vec2(-0.371868, 0.882138);
poissonDisk[52] = vec2(0.200476, 0.494430);
poissonDisk[53] = vec2(-0.494552, -0.711051);
poissonDisk[54] = vec2(0.612476, 0.705252);
poissonDisk[55] = vec2(-0.578845, -0.768792);
poissonDisk[56] = vec2(-0.772454, -0.090976);
poissonDisk[57] = vec2(0.504440, 0.372295);
poissonDisk[58] = vec2(0.155736, 0.065157);
poissonDisk[59] = vec2(0.391522, 0.849605);
poissonDisk[60] = vec2(-0.620106, -0.328104);
poissonDisk[61] = vec2(0.789239, -0.419965);
poissonDisk[62] = vec2(-0.545396, 0.538133);
poissonDisk[63] = vec2(-0.178564, -0.596057);



	vec2 c = gl_FragCoord.xy/vp.xy;
	vec3 n =  texture(texFB,c).xyz*2.0-1.0;
	//vec3 n = normal_from_depth(c);
	seed = hash(hash(hash(floatBitsToUint(n.x))+hash(floatBitsToUint(n.y) ) +hash(floatBitsToUint(n.z) )+hash(floatBitsToUint(c.x) )+hash(floatBitsToUint(c.y) ))+ 34034u);
  
	
	//
	
	float depth = texture(texDEPTH,c).r;
	
	float R = ssaoSize/depth;
	
	vec3 Rnd[Samples];
	//gaussian dist
	for (int i = 0; i < Samples; i++) {
	
	Rnd[i] = vec3(rnd(),rnd(),rnd());
	}

	float occ_depthf = 0;
	float volume = 0.0;
	/*integrate volume*/
	
	
	for ( int i = 0; i< Samples; i++) {
		float sample_depth = texture(texDEPTH,c+vec2(0.0,1.0)*(float(i-Samples/2.0))*ssaoSize/float(Samples)).r;
		if ( abs(sample_depth - depth) > 0.000001) 
		{
		if (sample_depth > depth)
			volume += 1.0 ;
		else
			volume -= 1.0 ;
		}
	}

	for ( int i = 0; i< Samples; i++) {
		float sample_depth = texture(texDEPTH,c+vec2(1.0,0.0)*(float(i-Samples/2.0))*ssaoSize/float(Samples)).r;
		if ( abs(sample_depth - depth) > 0.000001) 
		{
		if (sample_depth > depth)
			volume += 1.0 ;
		else
			volume -= 1.0 ;
		}
	}
	
	/*
	for ( int i = 0; i< Samples; i++) {
		vec2 sample = c+(poissonDisk[i]*0.5+0.5)*ssaoSize;
		float sample_depth = texture(texDEPTH,sample).r;
		float d =  length(vec3(sample,sample_depth)- vec3(c,depth));
		vec3 v =  normalize(vec3(sample,sample_depth) - vec3(c,depth));
		volume += max( 0.0, dot(n,v) *(1.0 / (1.0 + d )));
	}
	
*/

	occ_depthf = clamp((abs(volume)/ float(Samples) )-ssaoLevelClamp,0.0,1.0);	
	//TURN ON SSAO
	//color = texture(texFB,c)*(1-occ_depthf);
	//IMAGE ONLY
	//color = texture(texDEPTH,c);
	//SSAO ONLY
	color = vec4 (vec3(1.0-occ_depthf),1.0);
	//DEPTH TO NORMAL TEST
	//color = vec4(n,1.0);
}